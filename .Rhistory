#Nov_bad_days <- 0
for (j in 1:30){
is_in_array <- grepl(sprintf("^11/%d/",j),intervals_df[,"interval_start"])
if (length(which(is_in_array == 'TRUE')) != 96){
#bad_data_row <- c(1,j,0,0)
#bad_data_df <- rbind(bad_data_df,bad_data_row)
bad_data_df[nrow(bad_data_df)+1, ] <- c(11,j,0,0)
}
}
#cat("\nnov_bad_days: ",nov_bad_days)
#return(Nov_bad_days)
}
if (i == 'December'){
#Dec_bad_days <- 0
for (j in 1:31){
is_in_array <- grepl(sprintf("^12/j/"),intervals_df[,"interval_start"])
if ('TRUE' %in% is_in_array){
count <- count +1
}
if (count!=96){
Dec_bad_days <- c(Dec_bad_days,j)
}
}
#return(Dec_bad_days)
}
}
#print("Hello")
#cat('March bad days: ', Mar_bad_days)
#cat('November bad days: ', Nov_bad_days)
find_bad_hours(bad_data_df, interval_mod)
return(bad_data_df)
}
find_bad_hours <- function(bad_data_df, interval_mod){
for (row in 1:nrow(bad_data_df)){
for (hour in 1:23){
#View(bad_data_df)
#print(bad_data_df[row,'Month'])
#print(bad_data_df[row,'Data'])
#sprintf("^%d/%d/2015 %d:",bad_data_df[row,'Month'],bad_data_df[row,'Day'], hour)
if (bad_data_df[row,'Month'] == 3){
year <- 2015
}
if (bad_data_df[row,'Month'] == 11){
year <- 2014
}
bool_array <- grepl(sprintf("^%d/%d/%d %d:",bad_data_df[row,'Month'],bad_data_df[row,'Day'], year,hour),interval_mod[,"interval_start"])
counter_df <- as.data.frame(table(bool_array))
counter <- counter_df[2,2]
if (is.na(counter)){
counter <- 0
}
if (counter < 4){
bad_data_df[row,'Hour'] <- hour
bad_data_df[row,'Present'] <- 0
}
if (counter > 4){
bad_data_df[row,'Hour'] <- hour
times_repeated <- counter/4
bad_data_df[row,'Present'] <- times_repeated
}
}
}
return(bad_data_df)
}
fix_bad_data <- function(bad_data_df){
for (row in 1:nrow(bad_data_df)){
if (bad_data_df[row,'Present'] < 1){
#missing_hour()
}
}
}
utilityapiread()
source('~/GitHub/UtilityAPI/analysis.R')
debugSource('~/GitHub/UtilityAPI/analysis.R')
hour
row
counter
bad_data_df
debugSource('~/GitHub/UtilityAPI/analysis.R')
bad_data_df
source('~/GitHub/UtilityAPI/analysis.R')
View(interval_mod)
list_remove
source('~/GitHub/UtilityAPI/analysis.R')
?which
interval_mod
test_df
w <- which(test_df$Month == 3)
w
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
?rbind
source('~/GitHub/UtilityAPI/analysis.R')
interval_mod
intervals_df
source('~/GitHub/UtilityAPI/analysis.R')
9493-8177
?which
debugSource('~/GitHub/UtilityAPI/analysis.R')
insert_index
which(interval_mod$interval_start == '3/7/2015 17:45')
which(interval_mod$interval_start == '3/21/2015 12:45')
9493-8177
8177-6861
1316/4
329/4
329/24
row.names(interval_mod) <- 1:nrow(interval_mod)
View(interval_mod)
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
sapply(interval_mod,class)
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
new_date <- c(3,'/',7,'/',2015,' ', 18, ':','00')
new_date_factor <- factor(new_date)
new_date_factor
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
new_date <- c(3/7/2015, 18, ':','00')
new_date_factor <- factor(new_date)
new_date_factor
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
mmtcars
mtcars
View(mtcars)
teachers <- data.frame( "name" = character(), "age" = integer(), stringsAsFactors=FALSE)
teachers[nrow(teachers) + 1, ] <- c( "ted", 50)
teachers[nrow(teachers) + 1, ] <- c( "james", 55)
View(teachers)
newRow <- c("Arjun", 21)
teachers <- rbing(teachers[1:2,],newRow,teachers[-(1:2),])
teachers <- rbind(teachers[1:2,],newRow,teachers[-(1:2),])
newRow <- c("Varun", 21)
teachers <- rbind(teachers[1:2,],newRow,teachers[-(1:2),])
View(teachers)
newRow <- c("Ben", 21)
teachers <- rbind(teachers[1:2,],newRow,teachers[-(1:2),])
View(teachers)
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
View(interval_mod)
source('~/GitHub/UtilityAPI/analysis.R')
my.dates = seq(as.Date("6/1/2014"), as.Date("5/31/2015"), "day")
my.dates = seq(as.Date("2014/6/1"), as.Date("2015/5/31"), "day")
my.dates
myDateTimeStr <- "6/1/2014 0:00"
myPOSIXct <- as.POSIXct(myDateTimeStr)
myPOSIXct
myDateTimeStr <- "2014-6-1 0:00"
myPOSIXct <- as.POSIXct(myDateTimeStr)
myPOSIXct
myDateTimeStr <- "2014-6-1 00:00:00"
myPOSIXct <- as.POSIXct(myDateTimeStr)
myPOSIXct
myDateTimeStr <- "2014-6-1 00:15:00"
myPOSIXct <- as.POSIXct(myDateTimeStr)
myPOSIXct
myDateTimeStr <- "2014-6-1 2:15:00"
myPOSIXct <- as.POSIXct(myDateTimeStr)
myPOSIXct
myDateTimeStr <- "6/1/2014 2:15:00"
myPOSIXct <- as.POSIXct(myDateTimeStr)
myPOSIXct
myDateTimeStr <- "6/1/2014 2:15"
myPOSIXct1 <- as.POSIXct(myDateTimeStr, format ="%m/%d/%Y %H:%M"
myPOSIXct1 <- as.POSIXct(myDateTimeStr, format ="%m/%d/%Y %H:%M")
myPOSIXct1
startDateTimeStr <- "6/1/2014 0:00"
endDateTimeStr <- "5/31/2015 23:45"
startDate <- as.POSIXct(startDateTimeStr, formate ="%m/%d/%Y %H:%M")
endDate <- as.POSIXct(endDateTimeStr, format ="%m/%d/%Y %H:%M")
startDate <- as.POSIXct(startDateTimeStr, format ="%m/%d/%Y %H:%M")
dateSeq15min <- seq(from=startDate, to=endDate, by="15 min")
dateSeq15min
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
install.packages("lubridate")
library("lubridate", lib.loc="~/R/win-library/3.2")
ymd("6/30/2014 2:15")
test_df <- data.frame("interval_start" = character(), "kWh" = integer(), stringsAsFactors = FALSE)
library(plyr)
ddply(presidents, "name", summarise, year = seq(from, to))
?ddply
startDate
endDate
intervals <- seq(from=startDate, to=endDate, by="15 mins")
View(intervals)
intervals
sapply(intervals, class)
eapply(intervals,typeof)
ls()
typeof(intervals)
intervals[1]
intervals[2]
intervals[3]
intervals[4]
intervals[5]
intervals[6]
test_df
test_df[intervals,0]
View(test_df)
View(test_df)
test_data <- seq(1:35040)
test_df[intervals,test_data]
intervals[2]
df <- data.frame(intervals, seq(1:35040))
View(df)
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
library(compare)
install.packages("compare")
library("compare", lib.loc="~/R/win-library/3.2")
?ccompare
?compare
start <- as.POSIXct('6/1/2014 0:00', format ="%m/%d/%Y %H:%M")
end <- as.POSIXct('6/1/2014 1:45', format ="%m/%d/%Y %H:%M")
interval <- seq(from = start, to = end, by="15 min")
interval
df_2 <- data.frame('interval_start' = interval, 'interval_kWh' = rep(0, each=8))
interval_1 <- c('6/1/2014 0:00','6/1/2014 0:15','6/1/2014 0:30', '6/1/2014 0:45', '6/1/2014 1:00', '6/1/2014 1:15', '6/1/2014 1:30', '6/1/2014 1:45')
interval_1
kwH <- c(2.4, 1.12, 1.20, 1.12, 1.12, 1.28, 1.44, 1.28)
df_2 <- data.frame( "interval_start" = interval_1, "interval_kWh" = kwH, stringsAsFactors=FALSE)
View(df_1)
View(df_2)
df_2 <- data.frame('interval_start' = interval, 'interval_kWh' = rep(0, each=8))
View(df_2)
df_1 <- data.frame( "interval_start" = interval_1, "interval_kWh" = kwH, stringsAsFactors=FALSE)
View(df_1)
obj1 <- c("a", "a", "b", "c")
obj2 <- factor(obj1)
obj2
compare(obj1, obj2, allowAll = TRUE)
a1 <- data.frame(a = 1:5, b = letters[1:5])
a2 <- data.frame(a = 1:3, b = letters[1:3])
a1
a2
comparison <- compare(a1,a2,allowAll=TRUE)
View(comparison)
comparison
comparison$tM
df_1$interval_start <- as.POSIXct(df_1$interval_start, format = "%m/%d/%Y %H:%M")
View(df_1)
df <- rbind(df_1,df_2)
View(df)
df_1$source <- 1
df_2$source <- 2
df <- rbind(df_1,df_2)
dupsBetweenGroups <- function (df, idcol) {
# df: the data frame
# idcol: the column which identifies the group each row belongs to
# Get the data columns to use for finding matches
datacols <- setdiff(names(df), idcol)
# Sort by idcol, then datacols. Save order so we can undo the sorting later.
sortorder <- do.call(order, df)
df <- df[sortorder,]
# Find duplicates within each id group (first copy not marked)
dupWithin <- duplicated(df)
# With duplicates within each group filtered out, find duplicates between groups.
# Need to scan up and down with duplicated() because first copy is not marked.
dupBetween = rep(NA, nrow(df))
dupBetween[!dupWithin] <- duplicated(df[!dupWithin,datacols])
dupBetween[!dupWithin] <- duplicated(df[!dupWithin,datacols], fromLast=TRUE) | dupBetween[!dupWithin]
# ============= Replace NA's with previous non-NA value ==============
# This is why we sorted earlier - it was necessary to do this part efficiently
# Get indexes of non-NA's
goodIdx <- !is.na(dupBetween)
# These are the non-NA values from x only
# Add a leading NA for later use when we index into this vector
goodVals <- c(NA, dupBetween[goodIdx])
# Fill the indices of the output vector with the indices pulled from
# these offsets of goodVals. Add 1 to avoid indexing to zero.
fillIdx <- cumsum(goodIdx)+1
# The original vector, now with gaps filled
dupBetween <- goodVals[fillIdx]
# Undo the original sort
dupBetween[sortorder] <- dupBetween
# Return the vector of which entries are duplicated across groups
return(dupBetween)
}
dupRows <- dupsBetweenGroups(df, "source")
cbind(df, dup=dupRows)
dfNokWh <- subset(df, select = -interval_kWh)
dupRows <- dupsBetweenGroups(dfNokWh, "source")
cbind(df, dup=dupRows)
df <- merge(df_1, df_2, by="interval_start")
View(df)
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
df_1[nrow(df_1)+1,] <- c(2014-06-01 02:00:00, 1.1)
df_1[nrow(df_1)+1,] <- c("2014-06-01 02:00:00", 1.1)
df_1 <- subset(df_1, select = -(source)
df_1 <- subset(df_1, select = -(source))
View(df_1)
df_2 <- subset(df_2, select = -(source))
View(df_2)
df_1[nrow(df_1)+1,] <- c("2014-06-01 02:00:00", 1.1)
View(df_1)
df <- merge(df_1, df_2, by="interval_start")
View(df)
View(df_1)
source('~/GitHub/UtilityAPI/analysis.R')
df <- merge(df_1, df_2, by="interval_start", all.x = TRUE)
View(df)
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
newrow <- c("2014-06-01 01:00:00", 5)
df_1[nrow(df_1) + 1, ] <- newrow
View(df_1)
newrow <- c("2014-06-01 01:15:00", 6)
df_1[nrow(df_1) + 1, ] <- newrow
newrow <- c("2014-06-01 01:30:00", 7)
df_1[nrow(df_1) + 1, ] <- newrow
newrow <- c("2014-06-01 01:45:00", 8)
df_1[nrow(df_1) + 1, ] <- newrow
View(df_1)
df_1[duplicated(df_1),]
df_1$interval_start[10:13] <- as.POSIXct(df_1$interval_start[10:13], format ="%m/%d/%Y %H:%M")
df_1[duplicated(df_1),]
df_1$interval_start
source('~/GitHub/UtilityAPI/analysis.R')
duplicated(df_1)
df_1mod <- subset(df_1, select = -(interval_kWh))
View(df_1mod)
df_mod[duplicated(df_1),]
df_1mod[duplicated(df_1mod),]
df_1mod <- df_1[!duplicated(df_1$interval_start)]
df_1mod <- df_1[!duplicated(df_1$interval_start)]
df_1 <- df_1[!duplicated(df_1$interval_start)]
df_1 <- df_1[!duplicated(df_1$interval_start),]
View(df_1)
?duplicated
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
24*365*4
source('~/GitHub/UtilityAPI/analysis.R')
24*31*4
24*28*4
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
?tseq
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
debugSource('~/GitHub/UtilityAPI/analysis.R')
startDate
startDate
debugSource('~/GitHub/UtilityAPI/analysis.R')
startDate
endDate
interval15min
interval15min[1]
interval15min[2]
interval15min[14789]
interval15min[14790]
interval15min[14791]
interval15min[14792]
interval15min[14793]
source('~/GitHub/UtilityAPI/analysis.R')
start <- as.POSIXct("2014/06/01 0:00", format ="%m/%d/%Y %H:%M")
end <- as.POSIXct("2015/05/31 23:45", format ="%m/%d/%Y %H:%M")
interval <- seq(from = start, to = end, by = "15 min")
end
end <- as.POSIXct("2015/05/31 23:45", format ="%m/%d/%Y %H:%M")
end
endDate <- as.POSIXct("2015/05/31 23:45", format ="%m/%d/%Y %H:%M")
endDate
start
startDate <- "2014/06/01 0:00"
start <- as.POSIXct(startDate, format ="%m/%d/%Y %H:%M")
start
source('~/GitHub/UtilityAPI/analysis.R')
seq(from=2, to=10, by=2)
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
startDate = "6/1/2014 0:00"
endDate = "5/31/2015 23:45"
start = as.POSIXct(start, format ="%m/%d/%Y %H:%M")
end = as.POSIXct(end, format ="%m/%d/%Y %H:%M")
start
?chron
library("chron", lib.loc="~/R/win-library/3.2")
?chron
source('~/GitHub/UtilityAPI/analysis.R')
start
startDate
start <- as.POSIXct(startDate, format = "%m/%d/%Y %H:%M")
start
end
endDate
end <- as.POSIXct(endDate, format = "%m/%d/%Y %H:%M")
end
interval <- seq(from = startDate, to = endDate, by = "15 min")
endDate
startDate
startDate
interval <- seq(from = startDate, to = endDate, by = "15 min")
startingDate <- startDate
startingDate
end
start
interval <- seq(from = start, to = end, by = "15 min")
interval
write.csv(interval, "testoutput.csv", row.names = FALSE)
startDate
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
?as.difftime
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
debugSource('~/GitHub/UtilityAPI/analysis.R')
debugSource('~/GitHub/UtilityAPI/analysis.R')
debugSource('~/GitHub/UtilityAPI/analysis.R')
debugSource('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
365*24
source('~/GitHub/UtilityAPI/analysis.R')
365*24*4
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
startDate <- "06/01/2013 0:00"
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
install.packages("lubridate")
library("lubridate", lib.loc="~/R/win-library/3.2")
source('~/GitHub/UtilityAPI/analysis.R')
?chron
?as.chron
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
?POSIXct
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
?is.na
source('~/GitHub/UtilityAPI/analysis.R')
24*7*4
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
source('~/GitHub/UtilityAPI/analysis.R')
